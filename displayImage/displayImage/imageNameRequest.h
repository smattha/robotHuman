// Generated by gencpp from file displayImage/imageNameRequest.msg
// DO NOT EDIT!


#ifndef DISPLAYIMAGE_MESSAGE_IMAGENAMEREQUEST_H
#define DISPLAYIMAGE_MESSAGE_IMAGENAMEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace displayImage
{
template <class ContainerAllocator>
struct imageNameRequest_
{
  typedef imageNameRequest_<ContainerAllocator> Type;

  imageNameRequest_()
    : name()  {
    }
  imageNameRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::displayImage::imageNameRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::displayImage::imageNameRequest_<ContainerAllocator> const> ConstPtr;

}; // struct imageNameRequest_

typedef ::displayImage::imageNameRequest_<std::allocator<void> > imageNameRequest;

typedef boost::shared_ptr< ::displayImage::imageNameRequest > imageNameRequestPtr;
typedef boost::shared_ptr< ::displayImage::imageNameRequest const> imageNameRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::displayImage::imageNameRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::displayImage::imageNameRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::displayImage::imageNameRequest_<ContainerAllocator1> & lhs, const ::displayImage::imageNameRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::displayImage::imageNameRequest_<ContainerAllocator1> & lhs, const ::displayImage::imageNameRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace displayImage

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::displayImage::imageNameRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::displayImage::imageNameRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::displayImage::imageNameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::displayImage::imageNameRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::displayImage::imageNameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::displayImage::imageNameRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::displayImage::imageNameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c1f3d28f1b044c871e6eff2e9fc3c667";
  }

  static const char* value(const ::displayImage::imageNameRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc1f3d28f1b044c87ULL;
  static const uint64_t static_value2 = 0x1e6eff2e9fc3c667ULL;
};

template<class ContainerAllocator>
struct DataType< ::displayImage::imageNameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "displayImage/imageNameRequest";
  }

  static const char* value(const ::displayImage::imageNameRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::displayImage::imageNameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
;
  }

  static const char* value(const ::displayImage::imageNameRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::displayImage::imageNameRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imageNameRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::displayImage::imageNameRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::displayImage::imageNameRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DISPLAYIMAGE_MESSAGE_IMAGENAMEREQUEST_H
